// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: photometa_backend_access/v1/photometa_backend_access.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { GeneralResponse } from "../../general_entities/v1/general_entities";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "photometa.api_access.v1";

/** Запрос - получение пользователя по идентификатору */
export interface GetUserRequest {
  userId: number;
}

/** Ответ - получение пользователя по идентификатору */
export interface GetUserResponse {
  /** Пользователь */
  user?:
    | User
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - получение списка пользователей с ролями */
export interface GetUsersRequest {
}

/** Ответ - получение списка пользователей с ролями */
export interface GetUsersResponse {
  /** Пользователи */
  users: User[];
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - создание пользователя */
export interface AddUserRequest {
  /** Почта пользователя */
  email: string;
  /** Список идентификаторов ролей */
  rolesIds: number[];
}

/** Ответ - создание пользователя */
export interface AddUserResponse {
  /** Пользователь */
  user?:
    | User
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - создание пользователя */
export interface UpdateUserRequest {
  /** Идентификатор обновляемого пользователя */
  userId: number;
  /** Почта пользователя */
  email?:
    | string
    | undefined;
  /** Список идентификаторов ролей */
  rolesIds: number[];
}

/** Ответ - создание пользователя */
export interface UpdateUserResponse {
  /** Пользователь */
  user:
    | User
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - получение списка ролей с разрешениями */
export interface GetRolesRequest {
}

/** Ответ - получение списка ролей с разрешениями */
export interface GetRolesResponse {
  /** Список ролей */
  roles: Role[];
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - получение роли с разрешениями и пермишенами */
export interface GetRoleRequest {
  roleId: number;
}

/** Ответ - получение роли с разрешениями и пермишенами */
export interface GetRoleResponse {
  /** Роль */
  role?:
    | Role
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

export interface AddRoleRequest {
  /** Наименование роли */
  name: string;
  /** Список идентификаторов разрешений */
  permissionsIds: number[];
}

/** Ответ - создание роли */
export interface AddRoleResponse {
  /** Роль */
  role?:
    | Role
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - обновление роли */
export interface UpdateRoleRequest {
  /** Идентификатор обновляемой роли */
  roleId: number;
  /** Наименование роли */
  name?:
    | string
    | undefined;
  /** Список идентификаторов разрешений */
  permissionsIds: number[];
}

/** Ответ - обновление роли */
export interface UpdateRoleResponse {
  /** Роль */
  role?:
    | Role
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - удаление роли */
export interface DeleteRoleRequest {
  /** Идентификатор удаляемой роли */
  roleId: number;
}

/** Ответ - удаление роли */
export interface DeleteRoleResponse {
  /** Идентификатор удалённой роли */
  roleId?:
    | number
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - получение ролей пользователя */
export interface CheckMyAccessRequest {
}

/** Ответ - получение ролей пользователя */
export interface CheckMyAccessResponse {
  /** Список ролей пользователя */
  roles: Role[];
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - получение списка разрешений с методами */
export interface GetPermissionsRequest {
}

/** Ответ - получение списка разрешений с методами */
export interface GetPermissionsResponse {
  /** Список разрешений */
  permissions: Permission[];
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - получение разрешения с методами */
export interface GetPermissionRequest {
  permissionId: number;
}

/** Ответ - получение разрешения с методами */
export interface GetPermissionResponse {
  /** Разрешение */
  permission?:
    | Permission
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - создание разрешения */
export interface AddPermissionRequest {
  /** Наименование разрешения */
  name: string;
  /** Список идентификаторов методов */
  methodsIds: number[];
}

/** Ответ - создание разрешения */
export interface AddPermissionResponse {
  /** Разрешение */
  permission?:
    | Permission
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - обновление разрешения */
export interface UpdatePermissionRequest {
  /** Идентификатор обновляемого разрешения */
  permissionId: number;
  /** Наименование разрешения */
  name?:
    | string
    | undefined;
  /** Список идентификаторов методов */
  methodsIds: number[];
}

/** Ответ - обновление разрешения */
export interface UpdatePermissionResponse {
  /** Разрешение */
  permission?:
    | Permission
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - удаление разрешения */
export interface DeletePermissionRequest {
  /** Идентификатор удаляемого разрешения */
  permissionId: number;
}

/** Ответ - удаление разрешения */
export interface DeletePermissionResponse {
  /** Идентификатор удалённого разрешения */
  permissionId?:
    | number
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - получение списка методов */
export interface GetMethodsRequest {
}

/** Ответ - получение списка методов */
export interface GetMethodsResponse {
  /** Список методов */
  methods: Method[];
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - создание метода */
export interface AddMethodRequest {
  /** Наименование метода */
  name: string;
}

/** Ответ - создание метода */
export interface AddMethodResponse {
  /** Метод */
  method?:
    | Method
    | undefined;
  /** ��ета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - обновление метода */
export interface UpdateMethodRequest {
  /** Идентификатор обновляемого метода */
  methodId: number;
  /** Наименование метода */
  name?: string | undefined;
}

/** Ответ - обновление метода */
export interface UpdateMethodResponse {
  /** Метод */
  method?:
    | Method
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Запрос - удаление метода */
export interface DeleteMethodRequest {
  /** Идентификатор удаляемого метода */
  methodId: number;
}

/** Ответ - удаление метода */
export interface DeleteMethodResponse {
  /** Идентификатор удалённого метода */
  methodId?:
    | number
    | undefined;
  /** Мета информация ответа */
  response: GeneralResponse | undefined;
}

/** Сущность пользователя */
export interface User {
  /** Идентификатор пользователя */
  id: number;
  /** Почта пользователя */
  email: string;
  /** Дата создания */
  createdAt:
    | Date
    | undefined;
  /** Список ролей пользователя */
  roles: Role[];
}

/** Описание Роли */
export interface Role {
  /** Идентификатор роли */
  id: number;
  /** Наименование роли */
  name: string;
  /** Список разрешений для роли */
  permissions: Permission[];
}

/** Описание разрешения */
export interface Permission {
  /** Идентификатор разрешения */
  id: number;
  /** Наименование разрешения */
  name: string;
  /** Список методов для разрешения */
  methods: Method[];
}

/** Описание метода */
export interface Method {
  /** Идентификатор метода */
  id: number;
  /** название метода */
  name: string;
}

function createBaseGetUserRequest(): GetUserRequest {
  return { userId: 0 };
}

export const GetUserRequest: MessageFns<GetUserRequest> = {
  encode(message: GetUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int64(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: GetUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create(base?: DeepPartial<GetUserRequest>): GetUserRequest {
    return GetUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserRequest>): GetUserRequest {
    const message = createBaseGetUserRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseGetUserResponse(): GetUserResponse {
  return { user: undefined, response: undefined };
}

export const GetUserResponse: MessageFns<GetUserResponse> = {
  encode(message: GetUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserResponse {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: GetUserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<GetUserResponse>): GetUserResponse {
    return GetUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserResponse>): GetUserResponse {
    const message = createBaseGetUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseGetUsersRequest(): GetUsersRequest {
  return {};
}

export const GetUsersRequest: MessageFns<GetUsersRequest> = {
  encode(_: GetUsersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetUsersRequest {
    return {};
  },

  toJSON(_: GetUsersRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetUsersRequest>): GetUsersRequest {
    return GetUsersRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetUsersRequest>): GetUsersRequest {
    const message = createBaseGetUsersRequest();
    return message;
  },
};

function createBaseGetUsersResponse(): GetUsersResponse {
  return { users: [], response: undefined };
}

export const GetUsersResponse: MessageFns<GetUsersResponse> = {
  encode(message: GetUsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersResponse {
    return {
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [],
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: GetUsersResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<GetUsersResponse>): GetUsersResponse {
    return GetUsersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUsersResponse>): GetUsersResponse {
    const message = createBaseGetUsersResponse();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseAddUserRequest(): AddUserRequest {
  return { email: "", rolesIds: [] };
}

export const AddUserRequest: MessageFns<AddUserRequest> = {
  encode(message: AddUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    writer.uint32(42).fork();
    for (const v of message.rolesIds) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.rolesIds.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.rolesIds.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddUserRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      rolesIds: globalThis.Array.isArray(object?.rolesIds) ? object.rolesIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: AddUserRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.rolesIds?.length) {
      obj.rolesIds = message.rolesIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AddUserRequest>): AddUserRequest {
    return AddUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddUserRequest>): AddUserRequest {
    const message = createBaseAddUserRequest();
    message.email = object.email ?? "";
    message.rolesIds = object.rolesIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddUserResponse(): AddUserResponse {
  return { user: undefined, response: undefined };
}

export const AddUserResponse: MessageFns<AddUserResponse> = {
  encode(message: AddUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddUserResponse {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: AddUserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<AddUserResponse>): AddUserResponse {
    return AddUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddUserResponse>): AddUserResponse {
    const message = createBaseAddUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseUpdateUserRequest(): UpdateUserRequest {
  return { userId: 0, email: undefined, rolesIds: [] };
}

export const UpdateUserRequest: MessageFns<UpdateUserRequest> = {
  encode(message: UpdateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int64(message.userId);
    }
    if (message.email !== undefined) {
      writer.uint32(18).string(message.email);
    }
    writer.uint32(26).fork();
    for (const v of message.rolesIds) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.rolesIds.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.rolesIds.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      rolesIds: globalThis.Array.isArray(object?.rolesIds) ? object.rolesIds.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: UpdateUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.rolesIds?.length) {
      obj.rolesIds = message.rolesIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateUserRequest>): UpdateUserRequest {
    return UpdateUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateUserRequest>): UpdateUserRequest {
    const message = createBaseUpdateUserRequest();
    message.userId = object.userId ?? 0;
    message.email = object.email ?? undefined;
    message.rolesIds = object.rolesIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateUserResponse(): UpdateUserResponse {
  return { user: undefined, response: undefined };
}

export const UpdateUserResponse: MessageFns<UpdateUserResponse> = {
  encode(message: UpdateUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserResponse {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: UpdateUserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateUserResponse>): UpdateUserResponse {
    return UpdateUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateUserResponse>): UpdateUserResponse {
    const message = createBaseUpdateUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseGetRolesRequest(): GetRolesRequest {
  return {};
}

export const GetRolesRequest: MessageFns<GetRolesRequest> = {
  encode(_: GetRolesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRolesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetRolesRequest {
    return {};
  },

  toJSON(_: GetRolesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetRolesRequest>): GetRolesRequest {
    return GetRolesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetRolesRequest>): GetRolesRequest {
    const message = createBaseGetRolesRequest();
    return message;
  },
};

function createBaseGetRolesResponse(): GetRolesResponse {
  return { roles: [], response: undefined };
}

export const GetRolesResponse: MessageFns<GetRolesResponse> = {
  encode(message: GetRolesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.roles) {
      Role.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRolesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roles.push(Role.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRolesResponse {
    return {
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => Role.fromJSON(e)) : [],
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: GetRolesResponse): unknown {
    const obj: any = {};
    if (message.roles?.length) {
      obj.roles = message.roles.map((e) => Role.toJSON(e));
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<GetRolesResponse>): GetRolesResponse {
    return GetRolesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRolesResponse>): GetRolesResponse {
    const message = createBaseGetRolesResponse();
    message.roles = object.roles?.map((e) => Role.fromPartial(e)) || [];
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseGetRoleRequest(): GetRoleRequest {
  return { roleId: 0 };
}

export const GetRoleRequest: MessageFns<GetRoleRequest> = {
  encode(message: GetRoleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roleId !== 0) {
      writer.uint32(8).int64(message.roleId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRoleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roleId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRoleRequest {
    return { roleId: isSet(object.roleId) ? globalThis.Number(object.roleId) : 0 };
  },

  toJSON(message: GetRoleRequest): unknown {
    const obj: any = {};
    if (message.roleId !== 0) {
      obj.roleId = Math.round(message.roleId);
    }
    return obj;
  },

  create(base?: DeepPartial<GetRoleRequest>): GetRoleRequest {
    return GetRoleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRoleRequest>): GetRoleRequest {
    const message = createBaseGetRoleRequest();
    message.roleId = object.roleId ?? 0;
    return message;
  },
};

function createBaseGetRoleResponse(): GetRoleResponse {
  return { role: undefined, response: undefined };
}

export const GetRoleResponse: MessageFns<GetRoleResponse> = {
  encode(message: GetRoleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== undefined) {
      Role.encode(message.role, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRoleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.role = Role.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRoleResponse {
    return {
      role: isSet(object.role) ? Role.fromJSON(object.role) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: GetRoleResponse): unknown {
    const obj: any = {};
    if (message.role !== undefined) {
      obj.role = Role.toJSON(message.role);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<GetRoleResponse>): GetRoleResponse {
    return GetRoleResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRoleResponse>): GetRoleResponse {
    const message = createBaseGetRoleResponse();
    message.role = (object.role !== undefined && object.role !== null) ? Role.fromPartial(object.role) : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseAddRoleRequest(): AddRoleRequest {
  return { name: "", permissionsIds: [] };
}

export const AddRoleRequest: MessageFns<AddRoleRequest> = {
  encode(message: AddRoleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    writer.uint32(18).fork();
    for (const v of message.permissionsIds) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddRoleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.permissionsIds.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.permissionsIds.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddRoleRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      permissionsIds: globalThis.Array.isArray(object?.permissionsIds)
        ? object.permissionsIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: AddRoleRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.permissionsIds?.length) {
      obj.permissionsIds = message.permissionsIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AddRoleRequest>): AddRoleRequest {
    return AddRoleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddRoleRequest>): AddRoleRequest {
    const message = createBaseAddRoleRequest();
    message.name = object.name ?? "";
    message.permissionsIds = object.permissionsIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddRoleResponse(): AddRoleResponse {
  return { role: undefined, response: undefined };
}

export const AddRoleResponse: MessageFns<AddRoleResponse> = {
  encode(message: AddRoleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== undefined) {
      Role.encode(message.role, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddRoleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.role = Role.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddRoleResponse {
    return {
      role: isSet(object.role) ? Role.fromJSON(object.role) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: AddRoleResponse): unknown {
    const obj: any = {};
    if (message.role !== undefined) {
      obj.role = Role.toJSON(message.role);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<AddRoleResponse>): AddRoleResponse {
    return AddRoleResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddRoleResponse>): AddRoleResponse {
    const message = createBaseAddRoleResponse();
    message.role = (object.role !== undefined && object.role !== null) ? Role.fromPartial(object.role) : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseUpdateRoleRequest(): UpdateRoleRequest {
  return { roleId: 0, name: undefined, permissionsIds: [] };
}

export const UpdateRoleRequest: MessageFns<UpdateRoleRequest> = {
  encode(message: UpdateRoleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roleId !== 0) {
      writer.uint32(8).int64(message.roleId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    writer.uint32(26).fork();
    for (const v of message.permissionsIds) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRoleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roleId = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.permissionsIds.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.permissionsIds.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRoleRequest {
    return {
      roleId: isSet(object.roleId) ? globalThis.Number(object.roleId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      permissionsIds: globalThis.Array.isArray(object?.permissionsIds)
        ? object.permissionsIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: UpdateRoleRequest): unknown {
    const obj: any = {};
    if (message.roleId !== 0) {
      obj.roleId = Math.round(message.roleId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.permissionsIds?.length) {
      obj.permissionsIds = message.permissionsIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRoleRequest>): UpdateRoleRequest {
    return UpdateRoleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRoleRequest>): UpdateRoleRequest {
    const message = createBaseUpdateRoleRequest();
    message.roleId = object.roleId ?? 0;
    message.name = object.name ?? undefined;
    message.permissionsIds = object.permissionsIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateRoleResponse(): UpdateRoleResponse {
  return { role: undefined, response: undefined };
}

export const UpdateRoleResponse: MessageFns<UpdateRoleResponse> = {
  encode(message: UpdateRoleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== undefined) {
      Role.encode(message.role, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRoleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.role = Role.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRoleResponse {
    return {
      role: isSet(object.role) ? Role.fromJSON(object.role) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: UpdateRoleResponse): unknown {
    const obj: any = {};
    if (message.role !== undefined) {
      obj.role = Role.toJSON(message.role);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateRoleResponse>): UpdateRoleResponse {
    return UpdateRoleResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateRoleResponse>): UpdateRoleResponse {
    const message = createBaseUpdateRoleResponse();
    message.role = (object.role !== undefined && object.role !== null) ? Role.fromPartial(object.role) : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseDeleteRoleRequest(): DeleteRoleRequest {
  return { roleId: 0 };
}

export const DeleteRoleRequest: MessageFns<DeleteRoleRequest> = {
  encode(message: DeleteRoleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roleId !== 0) {
      writer.uint32(8).int64(message.roleId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRoleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roleId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRoleRequest {
    return { roleId: isSet(object.roleId) ? globalThis.Number(object.roleId) : 0 };
  },

  toJSON(message: DeleteRoleRequest): unknown {
    const obj: any = {};
    if (message.roleId !== 0) {
      obj.roleId = Math.round(message.roleId);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRoleRequest>): DeleteRoleRequest {
    return DeleteRoleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRoleRequest>): DeleteRoleRequest {
    const message = createBaseDeleteRoleRequest();
    message.roleId = object.roleId ?? 0;
    return message;
  },
};

function createBaseDeleteRoleResponse(): DeleteRoleResponse {
  return { roleId: undefined, response: undefined };
}

export const DeleteRoleResponse: MessageFns<DeleteRoleResponse> = {
  encode(message: DeleteRoleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roleId !== undefined) {
      writer.uint32(8).int64(message.roleId);
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRoleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.roleId = longToNumber(reader.int64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRoleResponse {
    return {
      roleId: isSet(object.roleId) ? globalThis.Number(object.roleId) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: DeleteRoleResponse): unknown {
    const obj: any = {};
    if (message.roleId !== undefined) {
      obj.roleId = Math.round(message.roleId);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRoleResponse>): DeleteRoleResponse {
    return DeleteRoleResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRoleResponse>): DeleteRoleResponse {
    const message = createBaseDeleteRoleResponse();
    message.roleId = object.roleId ?? undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseCheckMyAccessRequest(): CheckMyAccessRequest {
  return {};
}

export const CheckMyAccessRequest: MessageFns<CheckMyAccessRequest> = {
  encode(_: CheckMyAccessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckMyAccessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckMyAccessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CheckMyAccessRequest {
    return {};
  },

  toJSON(_: CheckMyAccessRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CheckMyAccessRequest>): CheckMyAccessRequest {
    return CheckMyAccessRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CheckMyAccessRequest>): CheckMyAccessRequest {
    const message = createBaseCheckMyAccessRequest();
    return message;
  },
};

function createBaseCheckMyAccessResponse(): CheckMyAccessResponse {
  return { roles: [], response: undefined };
}

export const CheckMyAccessResponse: MessageFns<CheckMyAccessResponse> = {
  encode(message: CheckMyAccessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.roles) {
      Role.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckMyAccessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckMyAccessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roles.push(Role.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckMyAccessResponse {
    return {
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => Role.fromJSON(e)) : [],
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: CheckMyAccessResponse): unknown {
    const obj: any = {};
    if (message.roles?.length) {
      obj.roles = message.roles.map((e) => Role.toJSON(e));
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<CheckMyAccessResponse>): CheckMyAccessResponse {
    return CheckMyAccessResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckMyAccessResponse>): CheckMyAccessResponse {
    const message = createBaseCheckMyAccessResponse();
    message.roles = object.roles?.map((e) => Role.fromPartial(e)) || [];
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseGetPermissionsRequest(): GetPermissionsRequest {
  return {};
}

export const GetPermissionsRequest: MessageFns<GetPermissionsRequest> = {
  encode(_: GetPermissionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPermissionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPermissionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPermissionsRequest {
    return {};
  },

  toJSON(_: GetPermissionsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetPermissionsRequest>): GetPermissionsRequest {
    return GetPermissionsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetPermissionsRequest>): GetPermissionsRequest {
    const message = createBaseGetPermissionsRequest();
    return message;
  },
};

function createBaseGetPermissionsResponse(): GetPermissionsResponse {
  return { permissions: [], response: undefined };
}

export const GetPermissionsResponse: MessageFns<GetPermissionsResponse> = {
  encode(message: GetPermissionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.permissions) {
      Permission.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPermissionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPermissionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.permissions.push(Permission.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPermissionsResponse {
    return {
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => Permission.fromJSON(e))
        : [],
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: GetPermissionsResponse): unknown {
    const obj: any = {};
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => Permission.toJSON(e));
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<GetPermissionsResponse>): GetPermissionsResponse {
    return GetPermissionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPermissionsResponse>): GetPermissionsResponse {
    const message = createBaseGetPermissionsResponse();
    message.permissions = object.permissions?.map((e) => Permission.fromPartial(e)) || [];
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseGetPermissionRequest(): GetPermissionRequest {
  return { permissionId: 0 };
}

export const GetPermissionRequest: MessageFns<GetPermissionRequest> = {
  encode(message: GetPermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionId !== 0) {
      writer.uint32(8).int64(message.permissionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.permissionId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPermissionRequest {
    return { permissionId: isSet(object.permissionId) ? globalThis.Number(object.permissionId) : 0 };
  },

  toJSON(message: GetPermissionRequest): unknown {
    const obj: any = {};
    if (message.permissionId !== 0) {
      obj.permissionId = Math.round(message.permissionId);
    }
    return obj;
  },

  create(base?: DeepPartial<GetPermissionRequest>): GetPermissionRequest {
    return GetPermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPermissionRequest>): GetPermissionRequest {
    const message = createBaseGetPermissionRequest();
    message.permissionId = object.permissionId ?? 0;
    return message;
  },
};

function createBaseGetPermissionResponse(): GetPermissionResponse {
  return { permission: undefined, response: undefined };
}

export const GetPermissionResponse: MessageFns<GetPermissionResponse> = {
  encode(message: GetPermissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permission !== undefined) {
      Permission.encode(message.permission, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPermissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.permission = Permission.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPermissionResponse {
    return {
      permission: isSet(object.permission) ? Permission.fromJSON(object.permission) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: GetPermissionResponse): unknown {
    const obj: any = {};
    if (message.permission !== undefined) {
      obj.permission = Permission.toJSON(message.permission);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<GetPermissionResponse>): GetPermissionResponse {
    return GetPermissionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPermissionResponse>): GetPermissionResponse {
    const message = createBaseGetPermissionResponse();
    message.permission = (object.permission !== undefined && object.permission !== null)
      ? Permission.fromPartial(object.permission)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseAddPermissionRequest(): AddPermissionRequest {
  return { name: "", methodsIds: [] };
}

export const AddPermissionRequest: MessageFns<AddPermissionRequest> = {
  encode(message: AddPermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    writer.uint32(18).fork();
    for (const v of message.methodsIds) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddPermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.methodsIds.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.methodsIds.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPermissionRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      methodsIds: globalThis.Array.isArray(object?.methodsIds)
        ? object.methodsIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: AddPermissionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.methodsIds?.length) {
      obj.methodsIds = message.methodsIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AddPermissionRequest>): AddPermissionRequest {
    return AddPermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddPermissionRequest>): AddPermissionRequest {
    const message = createBaseAddPermissionRequest();
    message.name = object.name ?? "";
    message.methodsIds = object.methodsIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddPermissionResponse(): AddPermissionResponse {
  return { permission: undefined, response: undefined };
}

export const AddPermissionResponse: MessageFns<AddPermissionResponse> = {
  encode(message: AddPermissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permission !== undefined) {
      Permission.encode(message.permission, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddPermissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.permission = Permission.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPermissionResponse {
    return {
      permission: isSet(object.permission) ? Permission.fromJSON(object.permission) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: AddPermissionResponse): unknown {
    const obj: any = {};
    if (message.permission !== undefined) {
      obj.permission = Permission.toJSON(message.permission);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<AddPermissionResponse>): AddPermissionResponse {
    return AddPermissionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddPermissionResponse>): AddPermissionResponse {
    const message = createBaseAddPermissionResponse();
    message.permission = (object.permission !== undefined && object.permission !== null)
      ? Permission.fromPartial(object.permission)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseUpdatePermissionRequest(): UpdatePermissionRequest {
  return { permissionId: 0, name: undefined, methodsIds: [] };
}

export const UpdatePermissionRequest: MessageFns<UpdatePermissionRequest> = {
  encode(message: UpdatePermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionId !== 0) {
      writer.uint32(8).int64(message.permissionId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    writer.uint32(26).fork();
    for (const v of message.methodsIds) {
      writer.int64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.permissionId = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.methodsIds.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.methodsIds.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePermissionRequest {
    return {
      permissionId: isSet(object.permissionId) ? globalThis.Number(object.permissionId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      methodsIds: globalThis.Array.isArray(object?.methodsIds)
        ? object.methodsIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: UpdatePermissionRequest): unknown {
    const obj: any = {};
    if (message.permissionId !== 0) {
      obj.permissionId = Math.round(message.permissionId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.methodsIds?.length) {
      obj.methodsIds = message.methodsIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePermissionRequest>): UpdatePermissionRequest {
    return UpdatePermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePermissionRequest>): UpdatePermissionRequest {
    const message = createBaseUpdatePermissionRequest();
    message.permissionId = object.permissionId ?? 0;
    message.name = object.name ?? undefined;
    message.methodsIds = object.methodsIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdatePermissionResponse(): UpdatePermissionResponse {
  return { permission: undefined, response: undefined };
}

export const UpdatePermissionResponse: MessageFns<UpdatePermissionResponse> = {
  encode(message: UpdatePermissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permission !== undefined) {
      Permission.encode(message.permission, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePermissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.permission = Permission.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePermissionResponse {
    return {
      permission: isSet(object.permission) ? Permission.fromJSON(object.permission) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: UpdatePermissionResponse): unknown {
    const obj: any = {};
    if (message.permission !== undefined) {
      obj.permission = Permission.toJSON(message.permission);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdatePermissionResponse>): UpdatePermissionResponse {
    return UpdatePermissionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdatePermissionResponse>): UpdatePermissionResponse {
    const message = createBaseUpdatePermissionResponse();
    message.permission = (object.permission !== undefined && object.permission !== null)
      ? Permission.fromPartial(object.permission)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseDeletePermissionRequest(): DeletePermissionRequest {
  return { permissionId: 0 };
}

export const DeletePermissionRequest: MessageFns<DeletePermissionRequest> = {
  encode(message: DeletePermissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionId !== 0) {
      writer.uint32(8).int64(message.permissionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePermissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.permissionId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePermissionRequest {
    return { permissionId: isSet(object.permissionId) ? globalThis.Number(object.permissionId) : 0 };
  },

  toJSON(message: DeletePermissionRequest): unknown {
    const obj: any = {};
    if (message.permissionId !== 0) {
      obj.permissionId = Math.round(message.permissionId);
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePermissionRequest>): DeletePermissionRequest {
    return DeletePermissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePermissionRequest>): DeletePermissionRequest {
    const message = createBaseDeletePermissionRequest();
    message.permissionId = object.permissionId ?? 0;
    return message;
  },
};

function createBaseDeletePermissionResponse(): DeletePermissionResponse {
  return { permissionId: undefined, response: undefined };
}

export const DeletePermissionResponse: MessageFns<DeletePermissionResponse> = {
  encode(message: DeletePermissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.permissionId !== undefined) {
      writer.uint32(8).int64(message.permissionId);
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeletePermissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.permissionId = longToNumber(reader.int64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePermissionResponse {
    return {
      permissionId: isSet(object.permissionId) ? globalThis.Number(object.permissionId) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: DeletePermissionResponse): unknown {
    const obj: any = {};
    if (message.permissionId !== undefined) {
      obj.permissionId = Math.round(message.permissionId);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<DeletePermissionResponse>): DeletePermissionResponse {
    return DeletePermissionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeletePermissionResponse>): DeletePermissionResponse {
    const message = createBaseDeletePermissionResponse();
    message.permissionId = object.permissionId ?? undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseGetMethodsRequest(): GetMethodsRequest {
  return {};
}

export const GetMethodsRequest: MessageFns<GetMethodsRequest> = {
  encode(_: GetMethodsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMethodsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMethodsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMethodsRequest {
    return {};
  },

  toJSON(_: GetMethodsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetMethodsRequest>): GetMethodsRequest {
    return GetMethodsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetMethodsRequest>): GetMethodsRequest {
    const message = createBaseGetMethodsRequest();
    return message;
  },
};

function createBaseGetMethodsResponse(): GetMethodsResponse {
  return { methods: [], response: undefined };
}

export const GetMethodsResponse: MessageFns<GetMethodsResponse> = {
  encode(message: GetMethodsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.methods) {
      Method.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMethodsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMethodsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.methods.push(Method.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMethodsResponse {
    return {
      methods: globalThis.Array.isArray(object?.methods) ? object.methods.map((e: any) => Method.fromJSON(e)) : [],
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: GetMethodsResponse): unknown {
    const obj: any = {};
    if (message.methods?.length) {
      obj.methods = message.methods.map((e) => Method.toJSON(e));
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<GetMethodsResponse>): GetMethodsResponse {
    return GetMethodsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMethodsResponse>): GetMethodsResponse {
    const message = createBaseGetMethodsResponse();
    message.methods = object.methods?.map((e) => Method.fromPartial(e)) || [];
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseAddMethodRequest(): AddMethodRequest {
  return { name: "" };
}

export const AddMethodRequest: MessageFns<AddMethodRequest> = {
  encode(message: AddMethodRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddMethodRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMethodRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMethodRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: AddMethodRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<AddMethodRequest>): AddMethodRequest {
    return AddMethodRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddMethodRequest>): AddMethodRequest {
    const message = createBaseAddMethodRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAddMethodResponse(): AddMethodResponse {
  return { method: undefined, response: undefined };
}

export const AddMethodResponse: MessageFns<AddMethodResponse> = {
  encode(message: AddMethodResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== undefined) {
      Method.encode(message.method, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddMethodResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMethodResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.method = Method.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMethodResponse {
    return {
      method: isSet(object.method) ? Method.fromJSON(object.method) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: AddMethodResponse): unknown {
    const obj: any = {};
    if (message.method !== undefined) {
      obj.method = Method.toJSON(message.method);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<AddMethodResponse>): AddMethodResponse {
    return AddMethodResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddMethodResponse>): AddMethodResponse {
    const message = createBaseAddMethodResponse();
    message.method = (object.method !== undefined && object.method !== null)
      ? Method.fromPartial(object.method)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseUpdateMethodRequest(): UpdateMethodRequest {
  return { methodId: 0, name: undefined };
}

export const UpdateMethodRequest: MessageFns<UpdateMethodRequest> = {
  encode(message: UpdateMethodRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.methodId !== 0) {
      writer.uint32(8).int64(message.methodId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMethodRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMethodRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.methodId = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMethodRequest {
    return {
      methodId: isSet(object.methodId) ? globalThis.Number(object.methodId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
    };
  },

  toJSON(message: UpdateMethodRequest): unknown {
    const obj: any = {};
    if (message.methodId !== 0) {
      obj.methodId = Math.round(message.methodId);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateMethodRequest>): UpdateMethodRequest {
    return UpdateMethodRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMethodRequest>): UpdateMethodRequest {
    const message = createBaseUpdateMethodRequest();
    message.methodId = object.methodId ?? 0;
    message.name = object.name ?? undefined;
    return message;
  },
};

function createBaseUpdateMethodResponse(): UpdateMethodResponse {
  return { method: undefined, response: undefined };
}

export const UpdateMethodResponse: MessageFns<UpdateMethodResponse> = {
  encode(message: UpdateMethodResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== undefined) {
      Method.encode(message.method, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMethodResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMethodResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.method = Method.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMethodResponse {
    return {
      method: isSet(object.method) ? Method.fromJSON(object.method) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: UpdateMethodResponse): unknown {
    const obj: any = {};
    if (message.method !== undefined) {
      obj.method = Method.toJSON(message.method);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateMethodResponse>): UpdateMethodResponse {
    return UpdateMethodResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMethodResponse>): UpdateMethodResponse {
    const message = createBaseUpdateMethodResponse();
    message.method = (object.method !== undefined && object.method !== null)
      ? Method.fromPartial(object.method)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseDeleteMethodRequest(): DeleteMethodRequest {
  return { methodId: 0 };
}

export const DeleteMethodRequest: MessageFns<DeleteMethodRequest> = {
  encode(message: DeleteMethodRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.methodId !== 0) {
      writer.uint32(8).int64(message.methodId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMethodRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMethodRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.methodId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMethodRequest {
    return { methodId: isSet(object.methodId) ? globalThis.Number(object.methodId) : 0 };
  },

  toJSON(message: DeleteMethodRequest): unknown {
    const obj: any = {};
    if (message.methodId !== 0) {
      obj.methodId = Math.round(message.methodId);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMethodRequest>): DeleteMethodRequest {
    return DeleteMethodRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMethodRequest>): DeleteMethodRequest {
    const message = createBaseDeleteMethodRequest();
    message.methodId = object.methodId ?? 0;
    return message;
  },
};

function createBaseDeleteMethodResponse(): DeleteMethodResponse {
  return { methodId: undefined, response: undefined };
}

export const DeleteMethodResponse: MessageFns<DeleteMethodResponse> = {
  encode(message: DeleteMethodResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.methodId !== undefined) {
      writer.uint32(8).int64(message.methodId);
    }
    if (message.response !== undefined) {
      GeneralResponse.encode(message.response, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMethodResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMethodResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.methodId = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response = GeneralResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMethodResponse {
    return {
      methodId: isSet(object.methodId) ? globalThis.Number(object.methodId) : undefined,
      response: isSet(object.response) ? GeneralResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: DeleteMethodResponse): unknown {
    const obj: any = {};
    if (message.methodId !== undefined) {
      obj.methodId = Math.round(message.methodId);
    }
    if (message.response !== undefined) {
      obj.response = GeneralResponse.toJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteMethodResponse>): DeleteMethodResponse {
    return DeleteMethodResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteMethodResponse>): DeleteMethodResponse {
    const message = createBaseDeleteMethodResponse();
    message.methodId = object.methodId ?? undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? GeneralResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseUser(): User {
  return { id: 0, email: "", createdAt: undefined, roles: [] };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).join();
    }
    for (const v of message.roles) {
      Role.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.roles.push(Role.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => Role.fromJSON(e)) : [],
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.roles?.length) {
      obj.roles = message.roles.map((e) => Role.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<User>): User {
    return User.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<User>): User {
    const message = createBaseUser();
    message.id = object.id ?? 0;
    message.email = object.email ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.roles = object.roles?.map((e) => Role.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRole(): Role {
  return { id: 0, name: "", permissions: [] };
}

export const Role: MessageFns<Role> = {
  encode(message: Role, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.permissions) {
      Permission.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Role {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRole();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.permissions.push(Permission.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Role {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      permissions: globalThis.Array.isArray(object?.permissions)
        ? object.permissions.map((e: any) => Permission.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Role): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.permissions?.length) {
      obj.permissions = message.permissions.map((e) => Permission.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Role>): Role {
    return Role.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Role>): Role {
    const message = createBaseRole();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.permissions = object.permissions?.map((e) => Permission.fromPartial(e)) || [];
    return message;
  },
};

function createBasePermission(): Permission {
  return { id: 0, name: "", methods: [] };
}

export const Permission: MessageFns<Permission> = {
  encode(message: Permission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.methods) {
      Method.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Permission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.methods.push(Method.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Permission {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      methods: globalThis.Array.isArray(object?.methods) ? object.methods.map((e: any) => Method.fromJSON(e)) : [],
    };
  },

  toJSON(message: Permission): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.methods?.length) {
      obj.methods = message.methods.map((e) => Method.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Permission>): Permission {
    return Permission.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Permission>): Permission {
    const message = createBasePermission();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.methods = object.methods?.map((e) => Method.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMethod(): Method {
  return { id: 0, name: "" };
}

export const Method: MessageFns<Method> = {
  encode(message: Method, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Method {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Method {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Method): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<Method>): Method {
    return Method.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Method>): Method {
    const message = createBaseMethod();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

export type PhotoMetaAccessServiceDefinition = typeof PhotoMetaAccessServiceDefinition;
export const PhotoMetaAccessServiceDefinition = {
  name: "PhotoMetaAccessService",
  fullName: "photometa.api_access.v1.PhotoMetaAccessService",
  methods: {
    /** Получение списка пользователей с ролями */
    getUsers: {
      name: "GetUsers",
      requestType: GetUsersRequest,
      requestStream: false,
      responseType: GetUsersResponse,
      responseStream: false,
      options: {},
    },
    /** Получение пользователя по идентификатору */
    getUser: {
      name: "GetUser",
      requestType: GetUserRequest,
      requestStream: false,
      responseType: GetUserResponse,
      responseStream: false,
      options: {},
    },
    /** Создание пользователя и присвоение ему ролей */
    addUser: {
      name: "AddUser",
      requestType: AddUserRequest,
      requestStream: false,
      responseType: AddUserResponse,
      responseStream: false,
      options: { idempotencyLevel: "IDEMPOTENT" },
    },
    /** Обновление пользователя */
    updateUser: {
      name: "UpdateUser",
      requestType: UpdateUserRequest,
      requestStream: false,
      responseType: UpdateUserResponse,
      responseStream: false,
      options: { idempotencyLevel: "IDEMPOTENT" },
    },
    /** Получение списка ролей с разрешениями */
    getRoles: {
      name: "GetRoles",
      requestType: GetRolesRequest,
      requestStream: false,
      responseType: GetRolesResponse,
      responseStream: false,
      options: {},
    },
    /** Получение роли с разрешениями и пермишенами */
    getRole: {
      name: "GetRole",
      requestType: GetRoleRequest,
      requestStream: false,
      responseType: GetRoleResponse,
      responseStream: false,
      options: {},
    },
    /** Создание новой роли и назначение ей разрешений */
    addRole: {
      name: "AddRole",
      requestType: AddRoleRequest,
      requestStream: false,
      responseType: AddRoleResponse,
      responseStream: false,
      options: { idempotencyLevel: "IDEMPOTENT" },
    },
    /** Обновление роли (обновление списка разрешений) */
    updateRole: {
      name: "UpdateRole",
      requestType: UpdateRoleRequest,
      requestStream: false,
      responseType: UpdateRoleResponse,
      responseStream: false,
      options: { idempotencyLevel: "IDEMPOTENT" },
    },
    /** Удаление роли */
    deleteRole: {
      name: "DeleteRole",
      requestType: DeleteRoleRequest,
      requestStream: false,
      responseType: DeleteRoleResponse,
      responseStream: false,
      options: { idempotencyLevel: "IDEMPOTENT" },
    },
    /** Получение списка ролей для пользователя (email из токена) */
    checkMyAccess: {
      name: "CheckMyAccess",
      requestType: CheckMyAccessRequest,
      requestStream: false,
      responseType: CheckMyAccessResponse,
      responseStream: false,
      options: {},
    },
    /** Получение списка разрешений с методами */
    getPermissions: {
      name: "GetPermissions",
      requestType: GetPermissionsRequest,
      requestStream: false,
      responseType: GetPermissionsResponse,
      responseStream: false,
      options: {},
    },
    /** Получение разрешения с методами */
    getPermission: {
      name: "GetPermission",
      requestType: GetPermissionRequest,
      requestStream: false,
      responseType: GetPermissionResponse,
      responseStream: false,
      options: {},
    },
    /** Создание нового разрешения и назначение ему методов */
    addPermission: {
      name: "AddPermission",
      requestType: AddPermissionRequest,
      requestStream: false,
      responseType: AddPermissionResponse,
      responseStream: false,
      options: { idempotencyLevel: "IDEMPOTENT" },
    },
    /** Обновление разрешения (обновление списка методов) */
    updatePermission: {
      name: "UpdatePermission",
      requestType: UpdatePermissionRequest,
      requestStream: false,
      responseType: UpdatePermissionResponse,
      responseStream: false,
      options: { idempotencyLevel: "IDEMPOTENT" },
    },
    /** Удаление разрешения */
    deletePermission: {
      name: "DeletePermission",
      requestType: DeletePermissionRequest,
      requestStream: false,
      responseType: DeletePermissionResponse,
      responseStream: false,
      options: { idempotencyLevel: "IDEMPOTENT" },
    },
    /** Получение списка методов */
    getMethods: {
      name: "GetMethods",
      requestType: GetMethodsRequest,
      requestStream: false,
      responseType: GetMethodsResponse,
      responseStream: false,
      options: {},
    },
    /** Создание нового метода */
    addMethod: {
      name: "AddMethod",
      requestType: AddMethodRequest,
      requestStream: false,
      responseType: AddMethodResponse,
      responseStream: false,
      options: { idempotencyLevel: "IDEMPOTENT" },
    },
    /** Обновление существующего метода */
    updateMethod: {
      name: "UpdateMethod",
      requestType: UpdateMethodRequest,
      requestStream: false,
      responseType: UpdateMethodResponse,
      responseStream: false,
      options: { idempotencyLevel: "IDEMPOTENT" },
    },
    /** Удаление метода */
    deleteMethod: {
      name: "DeleteMethod",
      requestType: DeleteMethodRequest,
      requestStream: false,
      responseType: DeleteMethodResponse,
      responseStream: false,
      options: { idempotencyLevel: "IDEMPOTENT" },
    },
  },
} as const;

export interface PhotoMetaAccessServiceImplementation<CallContextExt = {}> {
  /** Получение списка пользователей с ролями */
  getUsers(request: GetUsersRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetUsersResponse>>;
  /** Получение пользователя по идентификатору */
  getUser(request: GetUserRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetUserResponse>>;
  /** Создание пользователя и присвоение ему ролей */
  addUser(request: AddUserRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AddUserResponse>>;
  /** Обновление пользователя */
  updateUser(
    request: UpdateUserRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateUserResponse>>;
  /** Получение списка ролей с разрешениями */
  getRoles(request: GetRolesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetRolesResponse>>;
  /** Получение роли с разрешениями и пермишенами */
  getRole(request: GetRoleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetRoleResponse>>;
  /** Создание новой роли и назначение ей разрешений */
  addRole(request: AddRoleRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AddRoleResponse>>;
  /** Обновление роли (обновление списка разрешений) */
  updateRole(
    request: UpdateRoleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateRoleResponse>>;
  /** Удаление роли */
  deleteRole(
    request: DeleteRoleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteRoleResponse>>;
  /** Получение списка ролей для пользователя (email из токена) */
  checkMyAccess(
    request: CheckMyAccessRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CheckMyAccessResponse>>;
  /** Получение списка разрешений с методами */
  getPermissions(
    request: GetPermissionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPermissionsResponse>>;
  /** Получение разрешения с методами */
  getPermission(
    request: GetPermissionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPermissionResponse>>;
  /** Создание нового разрешения и назначение ему методов */
  addPermission(
    request: AddPermissionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddPermissionResponse>>;
  /** Обновление разрешения (обновление списка методов) */
  updatePermission(
    request: UpdatePermissionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdatePermissionResponse>>;
  /** Удаление разрешения */
  deletePermission(
    request: DeletePermissionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeletePermissionResponse>>;
  /** Получение списка методов */
  getMethods(
    request: GetMethodsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetMethodsResponse>>;
  /** Создание нового метода */
  addMethod(request: AddMethodRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AddMethodResponse>>;
  /** Обновление существующего метода */
  updateMethod(
    request: UpdateMethodRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateMethodResponse>>;
  /** Удаление метода */
  deleteMethod(
    request: DeleteMethodRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteMethodResponse>>;
}

export interface PhotoMetaAccessServiceClient<CallOptionsExt = {}> {
  /** Получение списка пользователей с ролями */
  getUsers(request: DeepPartial<GetUsersRequest>, options?: CallOptions & CallOptionsExt): Promise<GetUsersResponse>;
  /** Получение пользователя по идентификатору */
  getUser(request: DeepPartial<GetUserRequest>, options?: CallOptions & CallOptionsExt): Promise<GetUserResponse>;
  /** Создание пользователя и присвоение ему ролей */
  addUser(request: DeepPartial<AddUserRequest>, options?: CallOptions & CallOptionsExt): Promise<AddUserResponse>;
  /** Обновление пользователя */
  updateUser(
    request: DeepPartial<UpdateUserRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateUserResponse>;
  /** Получение списка ролей с разрешениями */
  getRoles(request: DeepPartial<GetRolesRequest>, options?: CallOptions & CallOptionsExt): Promise<GetRolesResponse>;
  /** Получение роли с разрешениями и пермишенами */
  getRole(request: DeepPartial<GetRoleRequest>, options?: CallOptions & CallOptionsExt): Promise<GetRoleResponse>;
  /** Создание новой роли и назначение ей разрешений */
  addRole(request: DeepPartial<AddRoleRequest>, options?: CallOptions & CallOptionsExt): Promise<AddRoleResponse>;
  /** Обновление роли (обновление списка разрешений) */
  updateRole(
    request: DeepPartial<UpdateRoleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateRoleResponse>;
  /** Удаление роли */
  deleteRole(
    request: DeepPartial<DeleteRoleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteRoleResponse>;
  /** Получение списка ролей для пользователя (email из токена) */
  checkMyAccess(
    request: DeepPartial<CheckMyAccessRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CheckMyAccessResponse>;
  /** Получение списка разрешений с методами */
  getPermissions(
    request: DeepPartial<GetPermissionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPermissionsResponse>;
  /** Получение разрешения с методами */
  getPermission(
    request: DeepPartial<GetPermissionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPermissionResponse>;
  /** Создание нового разрешения и назначение ему методов */
  addPermission(
    request: DeepPartial<AddPermissionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddPermissionResponse>;
  /** Обновление разрешения (обновление списка методов) */
  updatePermission(
    request: DeepPartial<UpdatePermissionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdatePermissionResponse>;
  /** Удаление разрешения */
  deletePermission(
    request: DeepPartial<DeletePermissionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeletePermissionResponse>;
  /** Получение списка методов */
  getMethods(
    request: DeepPartial<GetMethodsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetMethodsResponse>;
  /** Создание нового метода */
  addMethod(request: DeepPartial<AddMethodRequest>, options?: CallOptions & CallOptionsExt): Promise<AddMethodResponse>;
  /** Обновление существующего метода */
  updateMethod(
    request: DeepPartial<UpdateMethodRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateMethodResponse>;
  /** Удаление метода */
  deleteMethod(
    request: DeepPartial<DeleteMethodRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteMethodResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
