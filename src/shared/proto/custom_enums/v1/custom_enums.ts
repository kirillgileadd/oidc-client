// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: custom_enums/v1/custom_enums.proto

/* eslint-disable */

export const protobufPackage = "photometa.custom_enums.v1";

/**
 * Статусы операций
 *  http status codes
 *    https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
 *  gRPC status codes
 *    https://grpc.github.io/grpc/core/md_doc_statuscodes.html
 */
export enum OperationStatus {
  /** OPERATION_STATUS_UNSPECIFIED - Дефолтный (неопределенный) статус операции */
  OPERATION_STATUS_UNSPECIFIED = "OPERATION_STATUS_UNSPECIFIED",
  /**
   * OPERATION_STATUS_OK - Статус операции сигнализирующий о корректом завершении операции
   *  http analog status code: 200
   *  gRPC analog status code: 1
   */
  OPERATION_STATUS_OK = "OPERATION_STATUS_OK",
  /**
   * OPERATION_STATUS_ERROR - Статус операции сигнализирующий о не корректом завершении операции
   *  http analog status code: 400
   *  gRPC analog status code: 8,9,11
   */
  OPERATION_STATUS_ERROR = "OPERATION_STATUS_ERROR",
  /**
   * OPERATION_STATUS_NOT_PERMITTED - Статус операции сигнализирующий о недостаточном наборе прав для его вызова
   *  http analog status code: 403
   *  gRPC analog status code: 7
   */
  OPERATION_STATUS_NOT_PERMITTED = "OPERATION_STATUS_NOT_PERMITTED",
  /**
   * OPERATION_STATUS_DUPLICATE - Статус операции сигнализирующий о том что операция продублирована
   *  http analog status code: 409
   *  gRPC analog status code: 6
   */
  OPERATION_STATUS_DUPLICATE = "OPERATION_STATUS_DUPLICATE",
  /**
   * OPERATION_STATUS_SERVER_ERROR - Статус операции сигнализирующий о не корректой обработке со стороны сервера
   *  http analog status code: 500
   *  gRPC analog status code: 13,14,15
   */
  OPERATION_STATUS_SERVER_ERROR = "OPERATION_STATUS_SERVER_ERROR",
  /**
   * OPERATION_STATUS_NO_DATA - Статус операции сигнализирующий о том, что данных по запросу не обнаружено
   *  http analog status code: 204
   *  gRPC analog status code: 5
   */
  OPERATION_STATUS_NO_DATA = "OPERATION_STATUS_NO_DATA",
  /** OPERATION_STATUS_DECLINED - Статус операции сигнализирующий о том, что при текущих условиях операцию выполнить нельзя */
  OPERATION_STATUS_DECLINED = "OPERATION_STATUS_DECLINED",
  /** OPERATION_STATUS_LOCKED - Статус операции - заблокировано */
  OPERATION_STATUS_LOCKED = "OPERATION_STATUS_LOCKED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function operationStatusFromJSON(object: any): OperationStatus {
  switch (object) {
    case 0:
    case "OPERATION_STATUS_UNSPECIFIED":
      return OperationStatus.OPERATION_STATUS_UNSPECIFIED;
    case 1:
    case "OPERATION_STATUS_OK":
      return OperationStatus.OPERATION_STATUS_OK;
    case 2:
    case "OPERATION_STATUS_ERROR":
      return OperationStatus.OPERATION_STATUS_ERROR;
    case 3:
    case "OPERATION_STATUS_NOT_PERMITTED":
      return OperationStatus.OPERATION_STATUS_NOT_PERMITTED;
    case 4:
    case "OPERATION_STATUS_DUPLICATE":
      return OperationStatus.OPERATION_STATUS_DUPLICATE;
    case 5:
    case "OPERATION_STATUS_SERVER_ERROR":
      return OperationStatus.OPERATION_STATUS_SERVER_ERROR;
    case 6:
    case "OPERATION_STATUS_NO_DATA":
      return OperationStatus.OPERATION_STATUS_NO_DATA;
    case 7:
    case "OPERATION_STATUS_DECLINED":
      return OperationStatus.OPERATION_STATUS_DECLINED;
    case 8:
    case "OPERATION_STATUS_LOCKED":
      return OperationStatus.OPERATION_STATUS_LOCKED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationStatus.UNRECOGNIZED;
  }
}

export function operationStatusToJSON(object: OperationStatus): string {
  switch (object) {
    case OperationStatus.OPERATION_STATUS_UNSPECIFIED:
      return "OPERATION_STATUS_UNSPECIFIED";
    case OperationStatus.OPERATION_STATUS_OK:
      return "OPERATION_STATUS_OK";
    case OperationStatus.OPERATION_STATUS_ERROR:
      return "OPERATION_STATUS_ERROR";
    case OperationStatus.OPERATION_STATUS_NOT_PERMITTED:
      return "OPERATION_STATUS_NOT_PERMITTED";
    case OperationStatus.OPERATION_STATUS_DUPLICATE:
      return "OPERATION_STATUS_DUPLICATE";
    case OperationStatus.OPERATION_STATUS_SERVER_ERROR:
      return "OPERATION_STATUS_SERVER_ERROR";
    case OperationStatus.OPERATION_STATUS_NO_DATA:
      return "OPERATION_STATUS_NO_DATA";
    case OperationStatus.OPERATION_STATUS_DECLINED:
      return "OPERATION_STATUS_DECLINED";
    case OperationStatus.OPERATION_STATUS_LOCKED:
      return "OPERATION_STATUS_LOCKED";
    case OperationStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function operationStatusToNumber(object: OperationStatus): number {
  switch (object) {
    case OperationStatus.OPERATION_STATUS_UNSPECIFIED:
      return 0;
    case OperationStatus.OPERATION_STATUS_OK:
      return 1;
    case OperationStatus.OPERATION_STATUS_ERROR:
      return 2;
    case OperationStatus.OPERATION_STATUS_NOT_PERMITTED:
      return 3;
    case OperationStatus.OPERATION_STATUS_DUPLICATE:
      return 4;
    case OperationStatus.OPERATION_STATUS_SERVER_ERROR:
      return 5;
    case OperationStatus.OPERATION_STATUS_NO_DATA:
      return 6;
    case OperationStatus.OPERATION_STATUS_DECLINED:
      return 7;
    case OperationStatus.OPERATION_STATUS_LOCKED:
      return 8;
    case OperationStatus.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum OrderStatus {
  /** ORDER_STATUS_UNSPECIFIED - Дефолтный (неопределенный) статус заказа */
  ORDER_STATUS_UNSPECIFIED = "ORDER_STATUS_UNSPECIFIED",
  /** ORDER_STATUS_CREATED - Cтатус заказа "Создан", присваивается после создания заказа */
  ORDER_STATUS_CREATED = "ORDER_STATUS_CREATED",
  /** ORDER_STATUS_PAID - Cтатус заказа "Оплачен", присваивается после оплаты заказа (устанавливается вручную менеджером) */
  ORDER_STATUS_PAID = "ORDER_STATUS_PAID",
  /** ORDER_STATUS_CANCELLED - Cтатус заказа "Отменён", присваивается после отмены заказа пользователем или менеджером */
  ORDER_STATUS_CANCELLED = "ORDER_STATUS_CANCELLED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function orderStatusFromJSON(object: any): OrderStatus {
  switch (object) {
    case 0:
    case "ORDER_STATUS_UNSPECIFIED":
      return OrderStatus.ORDER_STATUS_UNSPECIFIED;
    case 1:
    case "ORDER_STATUS_CREATED":
      return OrderStatus.ORDER_STATUS_CREATED;
    case 2:
    case "ORDER_STATUS_PAID":
      return OrderStatus.ORDER_STATUS_PAID;
    case 3:
    case "ORDER_STATUS_CANCELLED":
      return OrderStatus.ORDER_STATUS_CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OrderStatus.UNRECOGNIZED;
  }
}

export function orderStatusToJSON(object: OrderStatus): string {
  switch (object) {
    case OrderStatus.ORDER_STATUS_UNSPECIFIED:
      return "ORDER_STATUS_UNSPECIFIED";
    case OrderStatus.ORDER_STATUS_CREATED:
      return "ORDER_STATUS_CREATED";
    case OrderStatus.ORDER_STATUS_PAID:
      return "ORDER_STATUS_PAID";
    case OrderStatus.ORDER_STATUS_CANCELLED:
      return "ORDER_STATUS_CANCELLED";
    case OrderStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function orderStatusToNumber(object: OrderStatus): number {
  switch (object) {
    case OrderStatus.ORDER_STATUS_UNSPECIFIED:
      return 0;
    case OrderStatus.ORDER_STATUS_CREATED:
      return 1;
    case OrderStatus.ORDER_STATUS_PAID:
      return 2;
    case OrderStatus.ORDER_STATUS_CANCELLED:
      return 3;
    case OrderStatus.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum PaymentType {
  /** PAYMENT_TYPE_UNSPECIFIED - Дефолтный (неопределенный) статус оплаты */
  PAYMENT_TYPE_UNSPECIFIED = "PAYMENT_TYPE_UNSPECIFIED",
  /** PAYMENT_TYPE_CRYPTO - Cтатус счета "Создан", присваивается после создания счёта */
  PAYMENT_TYPE_CRYPTO = "PAYMENT_TYPE_CRYPTO",
  /** PAYMENT_TYPE_BANK - Cтатус счета "Оплачен", присваивается после оплаты счёта (устанавливается вручную менеджером) */
  PAYMENT_TYPE_BANK = "PAYMENT_TYPE_BANK",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function paymentTypeFromJSON(object: any): PaymentType {
  switch (object) {
    case 0:
    case "PAYMENT_TYPE_UNSPECIFIED":
      return PaymentType.PAYMENT_TYPE_UNSPECIFIED;
    case 1:
    case "PAYMENT_TYPE_CRYPTO":
      return PaymentType.PAYMENT_TYPE_CRYPTO;
    case 2:
    case "PAYMENT_TYPE_BANK":
      return PaymentType.PAYMENT_TYPE_BANK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentType.UNRECOGNIZED;
  }
}

export function paymentTypeToJSON(object: PaymentType): string {
  switch (object) {
    case PaymentType.PAYMENT_TYPE_UNSPECIFIED:
      return "PAYMENT_TYPE_UNSPECIFIED";
    case PaymentType.PAYMENT_TYPE_CRYPTO:
      return "PAYMENT_TYPE_CRYPTO";
    case PaymentType.PAYMENT_TYPE_BANK:
      return "PAYMENT_TYPE_BANK";
    case PaymentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function paymentTypeToNumber(object: PaymentType): number {
  switch (object) {
    case PaymentType.PAYMENT_TYPE_UNSPECIFIED:
      return 0;
    case PaymentType.PAYMENT_TYPE_CRYPTO:
      return 1;
    case PaymentType.PAYMENT_TYPE_BANK:
      return 2;
    case PaymentType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum BalanceOperationType {
  /** BALANCE_OPERATION_TYPE_UNSPECIFIED - Дефолтный (неопределенный) тип операции */
  BALANCE_OPERATION_TYPE_UNSPECIFIED = "BALANCE_OPERATION_TYPE_UNSPECIFIED",
  /** BALANCE_OPERATION_TYPE_CREDITING - Пополнение подсказок на балансе (покупка) */
  BALANCE_OPERATION_TYPE_CREDITING = "BALANCE_OPERATION_TYPE_CREDITING",
  /** BALANCE_OPERATION_TYPE_DEBITING - Списание подсказок с баланса */
  BALANCE_OPERATION_TYPE_DEBITING = "BALANCE_OPERATION_TYPE_DEBITING",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function balanceOperationTypeFromJSON(object: any): BalanceOperationType {
  switch (object) {
    case 0:
    case "BALANCE_OPERATION_TYPE_UNSPECIFIED":
      return BalanceOperationType.BALANCE_OPERATION_TYPE_UNSPECIFIED;
    case 1:
    case "BALANCE_OPERATION_TYPE_CREDITING":
      return BalanceOperationType.BALANCE_OPERATION_TYPE_CREDITING;
    case 2:
    case "BALANCE_OPERATION_TYPE_DEBITING":
      return BalanceOperationType.BALANCE_OPERATION_TYPE_DEBITING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BalanceOperationType.UNRECOGNIZED;
  }
}

export function balanceOperationTypeToJSON(object: BalanceOperationType): string {
  switch (object) {
    case BalanceOperationType.BALANCE_OPERATION_TYPE_UNSPECIFIED:
      return "BALANCE_OPERATION_TYPE_UNSPECIFIED";
    case BalanceOperationType.BALANCE_OPERATION_TYPE_CREDITING:
      return "BALANCE_OPERATION_TYPE_CREDITING";
    case BalanceOperationType.BALANCE_OPERATION_TYPE_DEBITING:
      return "BALANCE_OPERATION_TYPE_DEBITING";
    case BalanceOperationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function balanceOperationTypeToNumber(object: BalanceOperationType): number {
  switch (object) {
    case BalanceOperationType.BALANCE_OPERATION_TYPE_UNSPECIFIED:
      return 0;
    case BalanceOperationType.BALANCE_OPERATION_TYPE_CREDITING:
      return 1;
    case BalanceOperationType.BALANCE_OPERATION_TYPE_DEBITING:
      return 2;
    case BalanceOperationType.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** Статус счета */
export enum InvoiceStatus {
  /** INVOICE_STATUS_UNSPECIFIED - Дефолтный (неопределенный) статус счета */
  INVOICE_STATUS_UNSPECIFIED = "INVOICE_STATUS_UNSPECIFIED",
  /** INVOICE_STATUS_CREATED - Статус Счета "Создан", присваивается после создания заказа */
  INVOICE_STATUS_CREATED = "INVOICE_STATUS_CREATED",
  /** INVOICE_STATUS_PAID - Статус Счета "Оплачен", присваивается после оплаты счета (устанавливается вручную менеджером) */
  INVOICE_STATUS_PAID = "INVOICE_STATUS_PAID",
  /** INVOICE_STATUS_CANCELLED - Статус заказа "Отменён", присваивается после отмены счета */
  INVOICE_STATUS_CANCELLED = "INVOICE_STATUS_CANCELLED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function invoiceStatusFromJSON(object: any): InvoiceStatus {
  switch (object) {
    case 0:
    case "INVOICE_STATUS_UNSPECIFIED":
      return InvoiceStatus.INVOICE_STATUS_UNSPECIFIED;
    case 1:
    case "INVOICE_STATUS_CREATED":
      return InvoiceStatus.INVOICE_STATUS_CREATED;
    case 2:
    case "INVOICE_STATUS_PAID":
      return InvoiceStatus.INVOICE_STATUS_PAID;
    case 3:
    case "INVOICE_STATUS_CANCELLED":
      return InvoiceStatus.INVOICE_STATUS_CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InvoiceStatus.UNRECOGNIZED;
  }
}

export function invoiceStatusToJSON(object: InvoiceStatus): string {
  switch (object) {
    case InvoiceStatus.INVOICE_STATUS_UNSPECIFIED:
      return "INVOICE_STATUS_UNSPECIFIED";
    case InvoiceStatus.INVOICE_STATUS_CREATED:
      return "INVOICE_STATUS_CREATED";
    case InvoiceStatus.INVOICE_STATUS_PAID:
      return "INVOICE_STATUS_PAID";
    case InvoiceStatus.INVOICE_STATUS_CANCELLED:
      return "INVOICE_STATUS_CANCELLED";
    case InvoiceStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function invoiceStatusToNumber(object: InvoiceStatus): number {
  switch (object) {
    case InvoiceStatus.INVOICE_STATUS_UNSPECIFIED:
      return 0;
    case InvoiceStatus.INVOICE_STATUS_CREATED:
      return 1;
    case InvoiceStatus.INVOICE_STATUS_PAID:
      return 2;
    case InvoiceStatus.INVOICE_STATUS_CANCELLED:
      return 3;
    case InvoiceStatus.UNRECOGNIZED:
    default:
      return -1;
  }
}
