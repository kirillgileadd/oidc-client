// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: general_entities/v1/general_entities.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  OperationStatus,
  operationStatusFromJSON,
  operationStatusToJSON,
  operationStatusToNumber,
} from "../../custom_enums/v1/custom_enums";
import { StringValue } from "../../google/protobuf/wrappers";

export const protobufPackage = "photometa.general_entities.v1";

/** Сущность ответа */
export interface GeneralResponse {
  /** Код ответа */
  status: OperationStatus;
  /** Описание ответа */
  description: string | undefined;
}

function createBaseGeneralResponse(): GeneralResponse {
  return { status: OperationStatus.OPERATION_STATUS_UNSPECIFIED, description: undefined };
}

export const GeneralResponse: MessageFns<GeneralResponse> = {
  encode(message: GeneralResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== OperationStatus.OPERATION_STATUS_UNSPECIFIED) {
      writer.uint32(8).int32(operationStatusToNumber(message.status));
    }
    if (message.description !== undefined) {
      StringValue.encode({ value: message.description! }, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GeneralResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeneralResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = operationStatusFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GeneralResponse {
    return {
      status: isSet(object.status)
        ? operationStatusFromJSON(object.status)
        : OperationStatus.OPERATION_STATUS_UNSPECIFIED,
      description: isSet(object.description) ? String(object.description) : undefined,
    };
  },

  toJSON(message: GeneralResponse): unknown {
    const obj: any = {};
    if (message.status !== OperationStatus.OPERATION_STATUS_UNSPECIFIED) {
      obj.status = operationStatusToJSON(message.status);
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<GeneralResponse>): GeneralResponse {
    return GeneralResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GeneralResponse>): GeneralResponse {
    const message = createBaseGeneralResponse();
    message.status = object.status ?? OperationStatus.OPERATION_STATUS_UNSPECIFIED;
    message.description = object.description ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
